<?php

namespace App\Models\Inputs\Stocks;

use App\Colaborador;
use App\Helpers\DataHelper;
use App\Models\Inputs\Tool;
use App\Models\Inputs\Voids\VoidTool;
use App\Models\Inputs\Voids\Voidx;
use App\Traits\SecurityTrait;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Auth;

class ToolStock extends Model {
	use SoftDeletes;
	use SecurityTrait;
	public $timestamps = true;
	protected $fillable = [
		'security_id',
		'tool_id',
		'owner_id',
		'void_tool_id',
		'expiration',
		'cost'
	];


	public function setVoid( $vold_tool_id ) {
		return $this->update( [
			'void_tool_id' => $vold_tool_id
		] );
	}

	public function setOwner( $owner_id ) {
		return $this->update( [
			'owner_id' => $owner_id
		] );
	}

	static public function createClean( array $attributes = [] ) {
		$attributes['owner_id']     = null;
		$attributes['void_tool_id'] = null;

		return parent::create( $attributes ); // TODO: Change the autogenerated stub
	}

	static public function createWithVoid( array $attributes = [] ) {
		Voidx::setUsed( $attributes['void_id'] );
		$VoidTool = VoidTool::createClean( $attributes );
		$VoidTool->enable( Auth::user()->colaborador->idcolaborador );
		$attributes['void_tool_id'] = $VoidTool->id;
		unset( $attributes['void_id'] );

		return parent::create( $attributes ); // TODO: Change the autogenerated stub
	}

	public function getCost() {
		return DataHelper::getFloat2RealMoeda( $this->attributes['cost'] );
	}

	public function getExpiration() {
		return DataHelper::getPrettyDate( $this->attributes['expiration'] );
	}

	public function setCostAttribute( $value ) {
		return $this->attributes['cost'] = DataHelper::getReal2Float( $value );
	}

	public function setExpirationAttribute( $value ) {
		return $this->attributes['expiration'] = DataHelper::setDate( $value );
	}

	// ************************** RELASHIONSHIP **********************************
	public function tool() {
		return $this->belongsTo( Tool::class );
	}

	public function owner() {
		return $this->belongsTo( Colaborador::class, 'owner_id', 'idcolaborador' );
	}

	public function void_tool() {
		return $this->belongsTo( VoidTool::class, 'void_tool_id' );
	}
}
